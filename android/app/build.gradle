plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}


def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreAvailable = System.getenv("KEYSTORE_PASSWORD") != null
    && System.getenv("KEY_PASSWORD") != null

static Boolean isGitRepository() {
    try {
        def proc = "git rev-parse --is-inside-work-tree".execute()
        proc.waitFor()
        return proc.exitValue() == 0
    } catch (ignored) {
        return false
    }
}

static String getGitSuffix() {
    if (!isGitRepository()) {
        return ""
    }
    def proc = "git describe --tags --always --dirty".execute()
    proc.waitFor()
    def matcher = (proc.text =~ /(?:-(\d+)-g([0-9a-f]+))?(-dirty)?$/)
    def match = matcher[0]
    def result = ""
    if (match[1] != null) {
        result = ".r${match[1]}-${match[2]}"
    }
    if (match[3] != null) {
        result += match[3]
    }
    return result
}

android {
    namespace 'me.evgfilim1.mafia_companion'
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "me.evgfilim1.mafia_companion"
        // 19 is required minimum for `package_info_plus`
        minSdkVersion ([flutter.minSdkVersion, 19].max())
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName + getGitSuffix()
    }

    signingConfigs {
        release {
            if (keystoreAvailable) {
                storeFile file(System.getenv("KEYSTORE_FILE") ?: "../keystore.jks")
                storePassword System.getenv("KEYSTORE_PASSWORD")
                keyAlias System.getenv("KEY_ALIAS") ?: "sign"
                keyPassword System.getenv("KEY_PASSWORD")
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            if (!keystoreAvailable) {
                println '$KEYSTORE_PASSWORD and/or $KEY_PASSWORD are not set, will use debug keys to sign release app variant'
            }
            signingConfig keystoreAvailable ? signingConfigs.release : signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}
